#!/usr/bin/env python3

import sys
import os
import os.path
import sipconfig

if 2 != len(sys.argv):
    print('Missing argument: BUILD_DIR_PATH (can be relative or absolute), e.g., "build"')
    sys.exit(1)

rel_dirname = os.path.dirname(sys.argv[0])
abs_dirname = os.path.realpath(rel_dirname)
os.chdir(abs_dirname)

sys.path.append(abs_dirname)
from Py3Qt5 import pyqtconfig

build_dir_path = sys.argv[1]
os.chdir(build_dir_path)

# This is relative from the build dir.
sip_file_path = os.path.realpath("../../../src/QCustomPlot_module.sip")

# This is relative from the build dir.
# We need it for qcustomplot.h
extra_include_dir_path = os.path.realpath("../../..")

# The name of the SIP build file generated by SIP and used by the build
# system.
build_file = "qcustomplot.sbf"

# Get the PyQt configuration information.
config = pyqtconfig.Configuration()
# Should be detected automatically, but if not, override here
#config.platform = "win32-msvc2008"

# Get the extra SIP flags needed by the imported PyQt modules.  Note that
# this normally only includes those flags (-x and -t) that relate to SIP's
# versioning system.
pyqt_sip_flags = config.pyqt_sip_flags

# Run SIP to generate the code.  Note that we tell SIP where to find the qt
# module's specification files using the -I flag.
assert 0 == os.system(" ".join([config.sip_bin, "-c", ".", "-b", build_file, "-I", config.pyqt_sip_dir, pyqt_sip_flags, sip_file_path]))

# We are going to install the SIP specification file for this module and
# its configuration module.
installs = []

installs.append([sip_file_path, os.path.join(config.default_sip_dir, "QCustomPlot")])

#installs.append(["qcustomplotconfig.py", config.default_mod_dir])

# Create the Makefile.  The QtGuiModuleMakefile class provided by the
# pyqtconfig module takes care of all the extra preprocessor, compiler and
# linker flags needed by the Qt library.
makefile = pyqtconfig.QtGuiModuleMakefile(
    configuration=config,
    build_file=build_file,
    installs=installs
)

makefile.extra_include_dirs = [extra_include_dir_path]

# Add the library we are wrapping.  The name doesn't include any platform
# specific prefixes or extensions (e.g. the "lib" prefix on UNIX, or the
# ".dll" extension on Windows).
if config.platform.startswith('win32'):
    libname = 'qcustomplot1'
    makefile.generator = "NMAKE"
else:
    libname = 'qcustomplot'
makefile.extra_libs = [libname]
makefile.extra_lib_dirs = ["../../sharedlib-compilation"]

# Generate the Makefile itself.
makefile.generate()

# Now we create the configuration module.  This is done by merging a Python
# dictionary (whose values are normally determined dynamically) with a
# (static) template.
content = {
    # Publish where the SIP specifications for this module will be
    # installed.
    "qcustomplot_sip_dir":    config.default_sip_dir,

    # Publish the set of SIP flags needed by this module.  As these are the
    # same flags needed by the qt module we could leave it out, but this
    # allows us to change the flags at a later date without breaking
    # scripts that import the configuration module.
    "qcustomplot_sip_flags":  pyqt_sip_flags
}

# This creates the helloconfig.py module from the helloconfig.py.in
# template and the dictionary.
#sipconfig.create_config_module("qcustomplotconfig.py", "qcustomplotconfig.py.in", content)

